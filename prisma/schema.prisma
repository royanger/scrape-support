generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "relationJoins"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                String         @id @unique @default(uuid())
  userId            String?        @unique
  discordId         String?        @unique
  discordUsername   String?
  discordAvatarId   String?
  anonymousUsername String         @unique
  anonymousAvatar   String         @db.LongText
  showUserName      Boolean        @default(false)
  banned            Boolean        @default(false)
  deleted           Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  ticketStatus      TicketStatus[]
  Thread            Thread[]
  Message           Message[]
  Onboarding        Onboarding[]
}

// formally TagName -- will need to be renamed/migrated to handle current prod data
model Tag {
  id        String         @id @unique
  name      String
  type      String?
  fullName  String?
  ThreadTag ThreadTag[]
  Ticket    TicketStatus[]
}

model TicketStatus {
  id        String   @id @unique @default(uuid())
  msgId     String   @unique
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id])
  type      String   @default("discord")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [discordId])

  @@index([authorId])
  @@index([tagId])
}

model Onboarding {
  id         String   @id @unique @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [userId])
  heardAbout String
  other      String?
  eap        Boolean
  projects   Json
  frameworks Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@index([userId])
}

model Thread {
  id        String      @id
  createdAt DateTime?   @default(now())
  updatedAt DateTime?
  timestamp DateTime?
  title     String      @db.LongText
  isPublic  Boolean     @default(false)
  discordId String
  author    User        @relation(fields: [discordId], references: [discordId])
  slug      String      @unique
  tags      ThreadTag[]
  messages  Message[]

  @@index([discordId])
  @@fulltext([title])
}

// Formally the Tag table
model ThreadTag {
  id       String @id
  tagId    String
  tag      Tag    @relation(fields: [tagId], references: [id])
  threadId String
  thread   Thread @relation(fields: [threadId], references: [id])

  @@index([threadId])
  @@index([tagId])
}

model Message {
  id          String       @id
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?
  timestamp   DateTime?
  content     String       @db.LongText
  threadId    String
  thread      Thread       @relation(fields: [threadId], references: [id])
  attachments Attachment[]
  discordId   String
  user        User         @relation(fields: [discordId], references: [discordId])

  @@index([threadId])
  @@fulltext([content])
}

model Attachment {
  id          String  @id
  url         String  @db.LongText
  messageId   String
  width       Int?
  height      Int?
  contentType String
  size        Int
  filename    String
  message     Message @relation(fields: [messageId], references: [id])

  @@index([messageId])
}
